TapClock v0.8.5 ReadMe for watchX v1.2
Used Arduino Version is v1.8.5/v1.8.8
Minor changes & EEprom Bugfix from v0.8.4

Removed a lot of "cosmetic code" from v0.8.2 like oled.print's to get more free space.

This Sketch uses libraries for the MAG3110 Chip. 
If you want to use it with watchX v1.3 you have to remove this code (see Setup).

A lot changes and fixes done since 0.6.4 :-)
* RTC Interrupt based Alarm Wakeup, see below Section "Alarm"
* Only one WatchFace possible because of low RAM, but Watchface can be chosen from sketch, see below "Watchface"
* All needed files are in the sketch folder
* Version v0.2 Clock5x7.h font file
* No need to modify the OLED library
* See Sketch Dokumentation

Definitions: 
ULB = Upper Left Button (USB Side)
URB = Upper Right Button
LRB = Lower Right Button

Links:
Download: https://github.com/venice1200/TapClock/archive/master.zip
Github: https://github.com/venice1200/TapClock/tree/master/TapClock
watchX Community: https://community.watchx.io/t/tapclock-for-watchx/134

-----------------------------------
Starting/Boot:
If watchX is starting the first thing you should see is like a boot screen with (hopefully) a lot OK's.
I add one "." for each command which is send to RTC Module.
I had more than once the Problem, also with the old RTC Library, that the sketch is not starting after the first commands send to the RTC.
It's like a little Boot Diagnose.

-----------------------------------
Charging
Charging is shown with an glowing Right Led.
If watchX is connected to USB Power the System will never go to sleep if it’s "On".
You can wait until the display is powered off and then connect USB Power for charging without “display on”.

-----------------------------------
Upload
You can upload code to the MCU only if the clock is awaken, so shake it (or press the Button) :-)

-----------------------------------
How to use

WakeUp to Watchface
watchX is woken up via Button- or MPU Interrupt from the deepest MCU Sleep Mode "SLEEP_MODE_PWR_DOWN".

Button Wakeup
The LRB Button "WakeUp" cannot be disabled.

MPU Wakeup
If "MPU Enabled" is set to 1 in Setup the MPU can show the Clock by:
  1) Wake up the system by shaking watchX, the left LED is powered on
  2) Rotate watch in that way that the Watchface can’t be seen, the left LED blinks
  3) Rotate watch in that way that Watchface can be seen, left LED is going off
If you don’t do this within the "Clocktime" the system goes back to sleep.

! Important ! This Wakeup Mode needs calibration of the MPU. 
See below "Calibration" for how to do this.

The Interrupt from the MPU is configured for waking the MCU on shaking or tapping.
The motion values for shaking or tapping are actually fixed in sketch.
Search "setup()" for:
mpu.setMotionDetectionThreshold(80); //80 
mpu.setMotionDetectionDuration(4); //4
and change it as you like.

If "MPU Enabled" is set to 0 in the Setup the MPU is send to sleep, 
means much longer usage is possible because of less power consumption.

Since v0.8.4 there 

Watchface Screen
The normal Clock Screen is shown for the Time Period "Clocktime" set in 1/10 seconds in the Setup Menu.
On the Watch screen you can see the Time created with an special font file "Clock5x7.h".
On the Top is written the Date and the named Day of Week.
An Battery Icon shows the Battery capacity in 25% steps.
An Bell Icon is shown if the RTC Alarm is enabled.
An Wave Icon is shown if the MPU is enabled
Below the Time is a moving Icon creating a line indicating seconds.
The ULB Button opens the Setup Menu
The URB Button opens the Stats Screen
The LRB Button has two functions 
  A short pressed Button clears an Alarm form  RTC or Battery.
  A longer pressed Button disables/enables the Alarm function temporary (will be overwritten from Reboot)

  
Setup Menu
The Setup List contains the following:
* Exit: Exit without saving changes and back to Clock
* Save: Save changed Values, Exit and back to Clock
* Hour, Minute, Day, Month, Year (two digits) of Actual Time
* Alarm Enabled: 0=Alarm Disabled, 2= Alarm Enabled
* Alarm Hour, Minute, 
* Alarm Day: Date, Day of Week or Binary Coded Weekdays, see Alarm 
* Alarm Mode: See Alarm
* Clocktime *100ms This is the Time where the Clock is shown
* Contrast *10 = OLED's Contrast Value
* MPU Enabled: 0=MPU Wakeup Disabled, 1=MPU Wakeup Enabled

You can scroll through the Menu List with the Buttons on the Right Side.
  A shortly pressed Button will scroll the Menu Up or Down one Step.
  A longer pressed Button will scroll the Menu Up or Down continuously.

If you like to modify an value move the Menu Up or Down until your chosen value is shown behind the ">".
Press ULB to enable modification of the Value, the Text will be shown inverted.
Now you can modify the Value with URB and LRB.
  A shortly pressed Button will modify the Value Up or Down one Step.
  A longer pressed Button will modify the Value Up or Down continuously.
  
After all modifications are done choose Exit or Save.
Most of the Values will be saved to EEProm.
The only value which is modifiable outside the Setup Menu is settings the Alarm On/Off 
with an longer pressed LRB Button at the Watch Screen. 
But this change is not (!) stored to EEProm.

Use Gestures in the Setup Menu
If the MPU is active and is properly calibrated you can scroll through the Menu and modify values 
by rotating your Arm/watchX forwards and backwards.


Stats Screen
The Stats screen shows Battery, Time, Uptime, "Wake" and "View" counters 
and if the MPU is enabled the Angle Values calculated from the MPU's Accelerator Values.
A long pressed URB Button will "Reset" UpTime and all Counters back to 0.
With ULB you go back to the Watchface Screen

-----------------------------------
Alarm (RTC Alarm)
Since TapClock v0.6.4 another RTC Library is used to use the RTC's Interrupt functionality.
With TapClock v0.8.0 i have added the RTC Alarm Interrupt WakeUp.
The DS3231 WakeUp capabilities are maybe not so flexible to configure as you may need.
Actually only RTC's Alarm 1 us used, Alarm 2 us unused.
With the Setup Value "Alarm Mode" you choose the RTC's Alarm functionality.
Depending on the Alarm Mode the Alarm will happen when:
1  The RTC Time matches Alarm Seconds (Once a Minute)
2  The RTC Time matches Alarm Seconds and Minutes (Once an Hour)
3  The RTC Time matches Alarm Seconds, Minutes and Hours (Once a Day)
4  The RTC Time matches Alarm Seconds, Minutes, Hours and Date (1-31, once a Month)
5  The RTC Time matches Alarm Seconds, Minutes, Hours and Day of Week (1-7, once a Week)
6  Mode 3 + Binary Coded WeekDays 

You can enable each Week Day Alarm by setting the corresponding bit

Bit:     7   6   5   4   3   2   1   0
            Sat Fri Thu Wed Tue Mon Sun 
Value:  128  64  32  16  8   4   2   1
Example: 0   0   0   1   1   1   1   0  = Decimal 30 => Value for Setup "Alarm Day"

If an Alarm happens, the Watch Beeps, the left LED Blinks and the Time is shown until you Press LRB.

See here for more library details: https://github.com/JChristensen/DS3232RTC

-----------------------------------
Battery Alarm
Generally, the Battery Level is checked each second when the watchX is woken up.

If the Battery goes below "WARNING" the Battery Icon blinks and the Battery Warning Alarm starts (LEDL).
If the Battery goes below "CRITCAL" the Battery Icon blinks the OLED will be inverted and the Battery Critical Alarm starts (LEDL/Buzzer).
If the Battery Level goes above OK the Display goes automatically back to "normal".
The Battery Alarm himself can be cleared separatly by pressing LRB (like clearing the RTC Alarm).
The other Indicators will be cleared if the needed Battery OK Level is reached.

The Battery Level Values for OK, WARNING and CRITCAL are currently defined in the sketch, see:
#define BATTERY_CRITCAL    6        // Battery Critical Level 
#define BATTERY_WARNING    10       // Battery Warning Level 
#define BATTERY_OK         15       // Battery OK Level

-----------------------------------
EEProm System
These EEProm Values are read on System Start and written from the Setup Menu.
b00:  Fixed value for detecting initial EEProm Setup done or not. See EEPROM_PRESETVAL in "setup()"
b01:  free            free
b02:  Clocktime       in 1/10sec
b03:  Watchface       unused
b04:  MPU Enabled     0=Off (Sleep), 1=On
b05:  Contrast        0..25 (*10)
b06:  Alarm Enabled   0=Off, 1=On
b07:  Alarm Hour      0..23
b08:  Alarm Minute    0..59
b09:  Alarm Day       Date or DayOfWeek
b10:  Alarm Mode      See RTC Alarm

-----------------------------------
Calibration (needed for MPU usage)
If you like to use TapClock with proper Angle Values you need to calibrate your MPU as each MCU is different.
Get the calibration sketch from here: https://github.com/venice1200/TapClock/tree/master/CalibratingSketch

You need to copy the calibration values out of the serial window (9600 baud) of the calibration sketch
into your copy of TapClock and replace the values with yours as each MPU is different.

Replace the below values in "setup()":
  // Offsets got from IMU_Zero Sketch
  mpu.setXAccelOffset(106);
  mpu.setYAccelOffset(-397);
  mpu.setZAccelOffset(1255);
  mpu.setXGyroOffset(68);
  mpu.setYGyroOffset(-9);
  mpu.setZGyroOffset(29);

  See the screenshot here https://i.imgur.com/FOmkXfg.png for which values are needed
You have to choose one of the calibration values for each section.

After you have replaced the calibration values in your sketch with yours and uploaded the sketch 
the Stats Screen should show nearly 0 at each Angle if the watchX lies on a flat and horizontal surface.
See https://i.imgur.com/mNhEpCd.jpg

See also the calibration sketch header as there are some more infos
like heating up the MPU for 10 Minutes before you run the calibrating sketch
and use a flat and horizontal surface for calibration.

-----------------------------------
Watchface (Modul System)
As of low Memory i decided to split the TapClock Sketch into Base and WatchFace files.
The Watchfaces are realized as ".h" files inside the sketch folder.
You need to un-comment out the one you like to use and comment the other out by adding "//" in front off.
// ======================== Watchfaces ==========================
//#include "WatchfaceSkeleton.h"       // Empty Watchface File      87%/51%
//#include "BasicWatchface.h"        // Original TapClock Watchface 89%/55%
#include "WordWatchface.h"         // WordClock Watchface         95%/58%
//#include "BlockWatchface.h"        // Block Clock Watchface       93%/58%
// ==============================================================

With this modification it's easy to use your own created Watchface with the Base System of TapClock.
I add the file "WatchfaceSkeleton.h" to the sketch folder, use this as base for your own Watchface.
You need to program/define the function "void showWatchface()" which is started from the Main Sketch if the Watch is shown.

Inside your Watchface file you can use the following Objects and Variables:

extern SSD1306AsciiSpi oled;               // The OLED Object 
extern bool AlarmOn;                       // Alarm active
extern bool AlarmEnabled;                  // Alarm enabled
extern uint8_t act_hr;                     // 8-Bit Integer (Byte) contains RTC Hour value
extern uint8_t act_min;                    // 8-Bit Integer (Byte) contains RTC Minute value
extern uint8_t act_sec;                    // 8-Bit Integer (Byte) contains RTC Second value 
extern uint8_t act_year;                   // 8-Bit Integer (Byte) contains RTC Year value "two digit lenght"
extern uint8_t act_month;                  // 8-Bit Integer (Byte) contains RTC Month value, see also char *months[13];
extern uint8_t act_day;                    // 8-Bit Integer (Byte) contains RTC Day value
extern uint8_t act_dayofweek;              // 8-Bit Integer (Byte) contains RTC Day Of Week value, 1-7, 1 = Sunday, see char *days[8];
extern uint8_t act_hr12;                   // 8-Bit Integer (Byte) contains RTC Hour Value 1-12 value for AM/PM based Watchfaces
extern bool min_changed;                   // Bool available one MCU cycle indicates "Minute has changed" 
extern bool sec_changed;                   // Bool available one MCU cycle indicates "Second has changed" 
extern bool every10secs;                   // Bool available one MCU cycle indicates "Second has changed" but only all 10 seconds 
extern const char *months[13];             // Array containing Month Names (0..12, 0 is empty)
extern const char *days[8];                // Array containing Day Names (0..7, 0 is empty)
extern float voltage;                      // Float containing Battery voltage, actualized each cycle if Watchface is shown
extern uint8_t percent;                    // 8-Bit Integer (Byte) containing the Battery level in Percentage, actualized each cycle if Watchface is shown
extern bool usbConnected;                  // Bool indicate USB Power is connected
extern bool init_view;                     // Bool can be used for Watchface Init 
                                           // Is set to true from Main Sketch before "showWatchface()" runs, should be set to false at the end of "showWatchface()
                                           // Normally Used for printing text immediately which is normally actualized each second/minute
extern char datebuffer[10];                // String/Char buffer for formated printed strings


-----------------------------------
Used Libraries
-watchX libs by ArgeX                   see http://watchx.io/downloads_en.html. 
                                        !! You need to remove the MPU6050 Library because of name conflicts !!
-I2CDEVLIB                              see https://github.com/jrowberg/i2cdevlib 
-Bounce2                                see https://github.com/thomasfredericks/Bounce2
-Pin Change Interrupt (PCINT)           see https://github.com/NicoHood/PinChangeInterrupt
-SSD1306 Text Library                   see https://github.com/greiman/SSD1306Ascii
-DS3232RTC RTC Library                  see https://github.com/JChristensen/DS3232RTC
-Streaming by Mikal Hart                see https://github.com/geneReeves/ArduinoStreaming fork of Mikal Hart's streaming5.zip
-NewTone by Tim Eckel                   see https://bitbucket.org/teckel12/arduino-new-tone/wiki/Home

-----------------------------------
Tips & Tricks
-Angle calculation                      see https://electronics.stackexchange.com/questions/142037/calculating-angles-from-mpu6050
-Set Time at "Setup"                    see http://www.l8ter.com/?p=417
-Nick Gammon Microprocessors Infos      see http://www.gammon.com.au/power and http://www.gammon.com.au/interrupts

-----------------------------------
Credits
A watchX Sketch based on watchX Hardware and:
watchX libs provided by ArgeX
OLED Library SSD1306Ascii by Greiman
i2cdevlib/mpu6050 by jrowberg
BasicWatch v1 from kghunt
watchX by Hackeitos
Interrupt and Power Save Mode Information by Nick Gammon
PinChange Interrupt library by NicoHood
DS3232RTC Library by JChristensen
Streaming Lib by Mikal Hart
NewTone by Tim Eckel
Arduino Team
The watchX Reddit Community

-----------------------------------
![0_Clock|690x461](upload://qiUSsVl9ftRWLU3n3nta7TFK1wh.jpeg) 
![0_Setup|690x453](upload://nL2rT3opJiwGSxDy5dBQJ6Ugbwr.jpeg) 
![0_Stats|690x423](upload://2CnUGfr7ZhmuZftsvXHtMMaWzMv.jpeg) 
